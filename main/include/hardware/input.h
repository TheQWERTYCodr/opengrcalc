#include <array>
#include <bitset>
#include <type_traits>
struct Button {
	enum {
		ctrl,
		shift,
		on,	sleep, poweroff,
		pause, stop, exit,
		up, kp_pgup,
		down, kp_pgdn,
		left,
		right,
		enter,
		apps, prgm,
		math, stat,
		menu, clear,
		del, ins,
		kp_0, list0,
		kp_1, list1,
		kp_2, list2,
		kp_3, list3,
		kp_4, list4,
		kp_5, list5,
		kp_6, list6,
		kp_7, list7,
		kp_8, list8,
		kp_9, list9,
		kp_period, ans,
		kp_lparen, kp_lbracket,
		kp_rparen, kp_rbracket,
		kp_add, kp_or, kp_nor,
		kp_sub, kp_xor, kp_not,
		kp_mult, kp_and, kp_nand,
		kp_div, kp_intdiv,
		kp_sin, kp_sinh, kp_asin, kp_asinh,
		kp_cos, kp_cosh, kp_acos, kp_acosh,
		kp_tan, kp_tanh, kp_atan, kp_atanh,
		kp_cot, kp_coth, kp_acot, kp_acoth,
		kp_square, kp_cube, kp_sqrt, kp_cbrt,
		kp_floor, kp_ceil, kp_abs, kp_round,
		kp_exp, kp_pow10, kp_ln, kp_log10,
		kp_pow, kp_nroot, kp_logb,
		kp_mod, kp_remainder,
		kbd_backtick, kbd_tilde,
		kbd_1, kbd_exclmark,
		kbd_2, kbd_atsign,
		kbd_3, kbd_numsign,
		kbd_4, kbd_dollarsign,
		kbd_5, kbd_percent,
		kbd_6, kbd_carat,
		kbd_7, kbd_ampersand,
		kbd_8, kbd_asterisk,
		kbd_9, kbd_lparen,
		kbd_0, kbd_rparen,
		kbd_hyphen, kbd_underscore,
		kbd_equals, kbd_plus,
		kbd_bksp, kbd_tab,
		kbd_q,
		kbd_w,
		kbd_e,
		kbd_r,
		kbd_t,
		kbd_y,
		kbd_u,
		kbd_i,
		kbd_o,
		kbd_p,
		kbd_lbracket, kbd_lbrace,
		kbd_rbracket, kbd_rbrace,
		kbd_backslash, kbd_vertbar,
		kbd_capslk,
		kbd_a,
		kbd_s,
		kbd_d,
		kbd_f,
		kbd_g,
		kbd_h,
		kbd_j,
		kbd_k,
		kbd_l,
		kbd_semicolon, kbd_colon,
		kbd_apostrophe, kbd_quote,
		kbd_enter,
		kbd_lshift,
		kbd_z,
		kbd_x,
		kbd_c,
		kbd_v,
		kbd_b,
		kbd_n,
		kbd_m,
		kbd_comma, kbd_lchevron,
		kbd_period, kbd_rchevron,
		kbd_slash, kbd_questmark,
		kbd_rshift,
		kbd_lctrl,
		kbd_space,
		kbd_rctrl,
		kbd_up,
		kbd_down,
		kbd_left,
		kbd_right,
		kbd_home,
		kbd_end,
		kbd_pgup,
		kbd_pgdn,
		BTN_COUNT,
	};
	operator unsigned long() {
		return (unsigned long)this;
	}
};
struct ButtonState {bool active, changed;};
struct ButtonArray {
	static std::bitset<(unsigned int)Button::BTN_COUNT> active;
	static std::bitset<(unsigned int)Button::BTN_COUNT> changed;
	static bool pressed(Button &x);
	static bool released(Button &x);
	static void poll();
	static void poll(Button &hint);
};
static auto btnarray_size = ButtonArray::active[Button::shift];