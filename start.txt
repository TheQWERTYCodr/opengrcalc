double      acos(double);
double      acosh(double);
double      asin(double);
double      asinh(double);
double      atan(double);
double      atan2(double, double);
double      atanh(double);
double      cbrt(double);
double      ceil(double);
double      copysign(double, double);
double      cos(double);
double      cosh(double);
double      erf(double);
double      erfc(double);
double      exp(double);
double      exp2(double);
double      expm1(double);
double      fabs(double);
double      fdim(double, double);
double      floor(double);
double      fma(double, double, double);
double      fmax(double, double);
double      fmin(double, double);
double      fmod(double, double);
double      frexp(double, int *);
double      hypot(double, double);
int         ilogb(double);
double      j0(double);
double      j1(double);
double      jn(int, double);
double      ldexp(double, int);
double      lgamma(double);
long long   llrint(double);
long long   llround(double);
double      log(double);
double      log10(double);
double      log1p(double);
double      log2(double);
double      logb(double);
long        lrint(double);
long        lround(double);
double      modf(double, double *);
double      nan(const char *);
double      nearbyint(double);
double      nextafter(double, double);
double      nexttoward(double, long double);
double      pow(double, double);
double      remainder(double, double);
double      remquo(double, double, int *);
double      rint(double);
double      round(double);
double      scalbln(double, long);
double      scalbn(double, int);
double      sin(double);
double      sinh(double);
double      sqrt(double);
double      tan(double);
double      tanh(double);
double      tgamma(double);
double      trunc(double);
double      y0(double);
double      y1(double);
double      yn(int, double);

all of these functions are required by POSIX. they will almost certainly compile on other architectures.

we should probably optimize expressions entered by the user
- if we do this, we should also add a mode to execute expressions explicitly as entered

we could also add an additional command-based floating point coprocessor, but that would be somewhat difficult.
common math functions:
double      acos(double);
double      acosh(double);
double      asin(double);
double      asinh(double);
double      atan(double);
double      atanh(double);
double      cbrt(double);
double      ceil(double);
double      cos(double);
double      cosh(double);
double      exp(double);
double      exp2(double);
double      fabs(double);
double      floor(double);
double      fmod(double, double);
double      log(double);
double      log10(double);
double      pow(double, double);
double      sin(double);
double      sinh(double);
double      sqrt(double);
double      tan(double);
double      tanh(double);




keys are listed as "k, ck; sk, csk"
ctrl, (none); ctrl-lock
shift, shift-lock
on, sleep; (none), poweroff
pause, stop; exit
up; pgup
down; pgdn
left
right
enter
apps, prgm
math, stat
menu, clear
del, ins
0 l0
1 l1
2 l2
3 l3
4 l4
5 l5
6 l6
7 l7
8 l8
9 l9
. ans
( [
) ]
+, bitwise OR; bitwise NOR
-, bitwise XOR; bitwise NOT
*, bitwise AND; bitwise NAND
/, // (floor div)
sin, sinh; asin, asinh
cos, cosh; acos, acosh
tan, tanh; atan, atanh
cot, coth; acot, acoth
square, cube; sqrt, cbrt
floor, ceil; abs, round
exp, 10^; ln, log
pow, root; log_b
mod, remainder
` ~
1 !
2 @
3 #
4 $
5 %
6 ^
7 &
8 *
9 (
0 )
- _
= +
bksp
tab
q Q; quit
w W; close tab
e E
r R; reload
t T; open tab
y Y
u U
i I
o O
p P
[ {
] }
\ |
capslk
a A; select all
s S; save
d D
f F; find
g G
h H
j J
k K
l L
; :
' "
enter
lshift
z Z; undo redo
x X; cut
c C; copy
v V; paste
b B
n N; new
m M
, <
. >
/ ?
shift
ctrl (2nd)
alt (3rd)
space
3rd
2nd
up
down
left
right
home
pgup
pgdn
end

+40 programmable buttons?
nah, 8 programmable btns is enough
that leaves 32 pins free for user expansion

=96 buttons
=$0.96
									1			5			10			25			100			200			500			1000		2000		5000		10000		20000		50000		100000
esp32-s3-wroom-1u					$3.0000000	$3.0000000	$2.8000000	$2.8000000	$2.5000000	$2.5000000	$2.5000000	$2.5000000	$2.5000000	$2.5000000	$2.5000000	$2.5000000	$2.5000000	$2.5000000
W25Q256JVFIQ 256Mb QSPI flash		$0.1000000	$0.1000000	$0.1000000	$0.1000000	$0.0900000	$0.0900000	$0.0900000	$0.0800000	$0.0800000	$0.0800000	$0.0800000	$0.0800000	$0.0800000	$0.0800000
SN74HC595 shift register			$1.0500000	$1.0500000	$1.0500000	$1.0000000	$0.9500000	$0.9500000	$0.9500000	$0.9500000	$0.9500000	$0.9500000	$0.9500000	$0.9500000	$0.9500000	$0.9500000
2"*1.5" lcd 240*320 st7789						$2.7200000	$2.7200000	$2.7200000	$2.7200000	$2.6200000	$2.6200000	$2.6200000	$2.5800000	$2.5800000	$2.5800000	$2.5800000	$2.5800000	$2.5800000
pcb												$9.5720000	$5.4350000	$3.0460000	$1.8451000	$1.6398000	$1.4360600	$1.1522300	$1.0745000	$1.0164620	$1.0147750	$1.0139225	$1.0134906	$1.0133197
6x6x6 smd button																													$0.0100000	$0.0100000	$0.0100000	$0.0100000	$0.0100000	$0.0100000
6x6x6 sparkfun button com-00097		$0.4500000	$0.4500000	$0.4500000	$0.4300000	$0.4100000	$0.4100000	$0.4100000	$0.4100000	$0.4100000	$0.4100000	$0.4100000	$0.4100000	$0.4100000	$0.4100000
int counts[] = {1,5,10,25,100,200,500,1000,2000,5000,10000,20000,50000,100000};


25Q128JVSIQ 128Mb QSPI flash	$0.10	$0.10	$0.10	$0.10	$0.10	$0.10	$0.10


171.45x57.15 mm




i have figured out the architecture/model:

processor+coprocessor
convert exprs to AST, simplify, convert trees to corresponding posix math functions, and run it on the main chip + coprocessor (for both precision and speed)
this allows the main processor to do more stuff, but also means we need 2 flash chips
maybe we could flash the main qspi with a loader and flash the second qspi flash using the main processor
or use sram, and use the second flash to copy to the first? - no, that's slow af and redundant
better to have second flash contain common routines and sram to store instructions? still slow
store data and common routines in flash chips, copy into sram on startup, then send coprocessor into a part of sram where it won't interfere with the main processor
